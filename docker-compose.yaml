version: '3.8'

services:
  db:
    container_name: prac_db
    image: postgres:12
    user: postgres
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_NAME}
      - POSTGRES_DB=${DB}
    ports:
    - "8081:5432"
    volumes:
      - pgdata:/var/lib/postgresql12/data
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres && pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: prac_mq
    hostname: prac_mq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_AK}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_SK}
    image: rabbitmq:3.10.7-management
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:15672
      - "5672:5672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  

  minio:
   container_name: prac_s3
   image: minio/minio:latest
   command: server --console-address ":9001" /data/
   ports:
     - "9000:9000"
     - "9001:9001"
   environment:
     MINIO_ROOT_USER: ${S3_AK}
     MINIO_ROOT_PASSWORD: ${S3_SK}
   volumes:
     - minio-storage:/data

  producer:
   network_mode: host
   container_name: producer
   image: pythonapp
   restart: always
   build: .
   command: uvicorn main:app --host 0.0.0.0
   depends_on:
     rabbitmq:
      condition: service_healthy 
     db:
      condition: service_healthy
     minio:
      condition: service_started

  consumer_1:
   network_mode: host
   container_name: consumer_1
   image: pythonapp
   restart: always
   build: .
   command: python3.10 ./consumer.py
   depends_on:
     rabbitmq:
      condition: service_healthy
     db:
      condition: service_healthy
     minio:
      condition: service_started

  consumer_2:
   network_mode: host
   container_name: consumer_2
   image: pythonapp
   restart: always
   build: .
   command: python3.10 ./consumer.py
   depends_on:
     rabbitmq:
      condition: service_healthy
     db:
      condition: service_healthy
     minio:
      condition: service_started
volumes:
  pgdata: {}
  minio-storage: